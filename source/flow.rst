.. _Flow:

Using flow builder
==================


This tutorial will show how to properly use flow builder to process messages
and events generated by devices.

.. note::
   - Who is this for: entry-level users
   - Level: basic
   - Reading time: X m

Dojot nodes
-----------

.. contents::
  :local:

Device in
*********

.. _device_in_node:
.. figure:: images/nodes/device_node.png
    :width: 60%
    :align: left
    :alt: devicein_node

This node determine an especific device to be the entry-point of a flow.
To configure the device in node, a window like :numref:`device_in_cfg` will be
displayed.

.. _device_in_cfg:
.. figure:: images/nodes/device_node_cfg.png
    :width: 50%
    :align: center
    :alt: devicein_node_cfg

    Figure 1: Device in configuration window

Fileds:

* **Name** *(optional)*: Name of the node
* **Device** *(required)*: The *dojot* device that will trigger the flow
* **Status** *(required)*: *exclude device status changes* will not use device status changes (online, offline) to trigger the flow. On the other hand, *include devices status changes* will use these status to trigger the flow.

.. note::
    If the the device that triggers a flow is removed, the flow becomes invalid.

Device template in
***********

.. _devicetemplate_in_node:
.. figure:: images/nodes/devicetemplate_node.png
    :width: 60%
    :align: left
    :alt: devicetemplatein_node

This node will make that a flow get triggered by devices that are composed by a certain
template. If the device template that is configured in **device template in** node is template A, all devices 
that are composed with template A will trigger the flow. For example: *device1* is composed by templates [A,B], 
*device2* by template A and *device3* by template B. Then, in that scenario, only messages from *device1* and
*device2* will initiate the flow, because template A is one of the templates that compose those devices.

.. _devicetemplate_in_node:
.. figure:: images/nodes/devicetemplate_node_cfg.png
    :width: 50%
    :align: center
    :alt: devicetemplatein_node

    Figure 2: Device template in configuration window

Fields:

* **Name** *(optional)*: Name of the node.
* **Device** *(required)*: The *dojot* device that will trigger the flow.
* **Status** *(required)*: Choose if devices status changes will trigger or not the flow.

http
****

.. _http_node:
.. figure:: images/nodes/http_node.png
    :width: 70%
    :align: left
    :alt: http_node

BLALBALBLALBALBLALBLALBALBLABLALBALBLALBALBLALBALBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASASD
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Device out
**********

.. _deviceout_node:
.. figure:: images/nodes/deviceout_node.png
    :width: 70%
    :align: left
    :alt: deviceout_node

Device out will determine wich device will have its attributes updated on *dojot* according
to the result of the flow. Bear in mind that this node doesn't send messages to your
device, it will only update the attributes on the platform. Normally, the chosen
device out is a *virtual device*, which is a device that exists only on *dojot*.
    
.. _deviceout_node_cfg:
.. figure:: images/nodes/deviceout_node_cfg.png
    :width: 50%
    :align: center
    :alt: deviceout_node_cfg

    Figure 3: Device out config window

Fields:

- **Name** *(optional)*: Name of the node.
- **Device** *(required)*: Select *The device that triggered the flow* will make the device that was the entry-point
  be the end-point of the flow. *Specific device* any chosen device wil be the output of the flow and *a device defined during the flow* will make a device that the flow selected during the execution the endpoint.
- **Source** *(required)*: Data structure that will be mapped as message to device out

Actuate
*******

.. _actuate_node:
.. figure:: images/nodes/actuate_node.png
    :width: 50%
    :align: left
    :alt: actuate_node

Actuate node is, basically, the same thing of **device out** node. But, it can send messages
to a real device, like telling a lamp to turn the light off and etc...

.. _actuate_node_cfg:
.. figure:: images/nodes/actuate_node_cfg.png
    :width: 50%
    :align: center
    :alt: actuate_node_cfg

    Figure 4: Actuate configuration

Fields:

* **Name** *(optional)*: Name of the node.
* **Device** *(required)*: A real device on dojot
* **Source** *(required)*: Data structure that will be mapped as message to device out

Change
*******

.. _change_node:
.. figure:: images/nodes/change_node.png
    :width: 50%
    :align: left
    :alt: change_node

Change node is used to copy or assign values to an output, i. e., copy
values of a message attributes to a dictionary that will be assigned to
virtual device                                                                                      
                                                                                

.. _change_node_cfg:
.. figure:: images/nodes/change_node_cfg.png
    :width: 50%
    :align: center
    :alt: change_node_cfg

    Figure 5: Change configuration

Fields:

* **Name** *(optional)*: Name of the node
* **msg** *(required)*: Definition of the data structure that will be sent to the next node and will receive the value set on the *to* field 
* **to** *(required)*: Assignment or copy of values

.. note::
    More than one rule can be assign by clicking on *+add* below the rules box.

switch
*******

.. _switch_node:
.. figure:: images/nodes/switch_node.png
    :width: 50%
    :align: left
    :alt: switch_node

                                                                                    
                                                                                

.. _switch_node_cfg:
.. figure:: images/nodes/switch_node_cfg.png
    :width: 50%
    :align: center
    :alt: switch_node_cfg

    Figure 5: Switch configuration

Fields:

* **Name** *(optional)*: Name of the node
* **msg** *(required)*: Definition of the data structure that will be sent to the next node and will receive the value set on the *to* field 
* **to** *(required)*: Assignment or copy of values

.. note::
    - More than one rule can be assign by clicking on *+add* below the rules box.
    - Each condition should have an corresponding output