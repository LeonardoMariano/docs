# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, CPqD
# This file is distributed under the same license as the dojot package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: dojot 0.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 14:50-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../source/using-api-interface.rst:4
msgid "Using API interface"
msgstr ""

#: ../../source/using-api-interface.rst:6
msgid ""
"This section provides a complete step-by-step tutorial of how to create, "
"update, send messages to and check historical data of a device. Also, "
"this tutorial assumes that you are using `docker-compose`_, which has all"
" the necessary components to properly run dojot."
msgstr ""

#: ../../source/using-api-interface.rst:12
msgid "Audience: developers"
msgstr ""

#: ../../source/using-api-interface.rst:13
msgid "Level: basic"
msgstr ""

#: ../../source/using-api-interface.rst:14
msgid "Reading time: 15 m"
msgstr ""

#: ../../source/using-api-interface.rst:18
msgid "Getting access token"
msgstr ""

#: ../../source/using-api-interface.rst:20
msgid ""
"As said in :ref:`User authentication`, all requests must contain a valid "
"access token. You can generate a new token by sending the following "
"request:"
msgstr ""

#: ../../source/using-api-interface.rst:31
msgid ""
"If you want to generate a token for other user, just change the username "
"and password in the request payload. The token (\"eyJ0eXAiOiJKV1QiL...\")"
" should be used in every HTTP request sent to dojot in a special header. "
"Such request would look like:"
msgstr ""

#: ../../source/using-api-interface.rst:41
msgid ""
"Remember that the token must be set in the request header as a whole, not"
" parts of it. In the example only the first characters are shown for the "
"sake of simplicity. All further requests will use an evironment variable "
"called ``bash ${JWT}``, which contains the token got from auth component."
msgstr ""

#: ../../source/using-api-interface.rst:48
msgid "Device creation"
msgstr ""

#: ../../source/using-api-interface.rst:50
msgid ""
"In order to properly configure a physical device in dojot, you must first"
" create its representation in the platform. The example presented here is"
" just a small part of what is offered by DeviceManager. For more "
"information, check the `DeviceManager how-to`_ for more detailed "
"instructions."
msgstr ""

#: ../../source/using-api-interface.rst:55
msgid ""
"First of all, let's create a template for the device - all devices are "
"based off of a template, remember."
msgstr ""

#: ../../source/using-api-interface.rst:74
msgid "This request should give back this message:"
msgstr ""

#: ../../source/using-api-interface.rst:110
msgid "Note that the template ID is 1 (line 27)."
msgstr ""

#: ../../source/using-api-interface.rst:112
msgid "To create a template based on it, send the following request to dojot:"
msgstr ""

#: ../../source/using-api-interface.rst:128
msgid ""
"The template ID list on line 6 contains the only template ID configured "
"so far. To check out the configured device, just send a GET request to "
"/device:"
msgstr ""

#: ../../source/using-api-interface.rst:136
msgid "Which should give back:"
msgstr ""

#: ../../source/using-api-interface.rst:173
msgid "Sending messages"
msgstr ""

#: ../../source/using-api-interface.rst:175
msgid ""
"So far we got an access token and created a template and a device based "
"on it. In an actual deployment, the physical device would send messages "
"to dojot with all its attributes and their current values. For this "
"tutorial we will send MQTT messages by hand to the platform, emulating "
"such physical device. For that, we will use mosquitto_pub from Mosquitto "
"project."
msgstr ""

#: ../../source/using-api-interface.rst:182
msgid ""
"Some Linux distributions, Ubuntu in particular, have two packages for "
"`mosquitto`_ - one containing tools to access it (i.e. mosquitto_pub and "
"mosquitto_sub for publishing messages and subscribing to topics) and "
"another one containing the MQTT broker. In this tutorial, only the tools "
"are going to be used. Please check if MQTT broker is not running before "
"starting dojot (by running commands like ``ps aux | grep mosquitto``)."
msgstr ""

#: ../../source/using-api-interface.rst:190
msgid ""
"The default message format used by dojot is a simple key-value JSON (you "
"could translate any message format to this scheme using flows, though), "
"such as:"
msgstr ""

#: ../../source/using-api-interface.rst:199
msgid "Let's send this message to dojot:"
msgstr ""

#: ../../source/using-api-interface.rst:206
msgid "If there is no output, the message was sent to MQTT broker."
msgstr ""

#: ../../source/using-api-interface.rst:208
msgid ""
"As noted in the :doc:`../faq/faq`, there are some considerations "
"regarding MQTT topics:"
msgstr ""

#: ../../source/using-api-interface.rst:211
msgid ""
"You can set the device ID that originates the message using the ``client-"
"id`` MQTT parameter. It should follow the following pattern: "
"``<service>:<deviceid>``, such as ``admin:efac``."
msgstr ""

#: ../../source/using-api-interface.rst:215
msgid ""
"If you can't do such thing, then the device should set its ID using the "
"topic used to publish messages. The topic should assume the pattern "
"``/<service-id>/<device-id>/attrs`` (for instance: "
"``/admin/efac/attrs``)."
msgstr ""

#: ../../source/using-api-interface.rst:219
msgid ""
"If you do define a topic in device template, then your device should "
"publish its data to it and set the client-id parameter."
msgstr ""

#: ../../source/using-api-interface.rst:222
msgid ""
"MQTT payload must be a JSON with each key being an attribute of the dojot"
" device, such as:"
msgstr ""

#: ../../source/using-api-interface.rst:229
msgid ""
"For more information on how dojot deals with data sent from devices, "
"check the :doc:`integrating-physical-devices` tutorial. There you can "
"find how to deal with devices that don't publish messages in such format "
"and how to translate them."
msgstr ""

#: ../../source/using-api-interface.rst:235
msgid "Checking historical data"
msgstr ""

#: ../../source/using-api-interface.rst:237
msgid ""
"In order to check all values that were sent from a device for a "
"particular attribute, you could use the `history APIs`_. Let's first send"
" a few other values to dojot so we can get a few more interesting "
"results:"
msgstr ""

#: ../../source/using-api-interface.rst:249
msgid "To retrieve all values sent for temperature attribute of this device:"
msgstr ""

#: ../../source/using-api-interface.rst:257
msgid "The history endpoint is built from these values:"
msgstr ""

#: ../../source/using-api-interface.rst:259
msgid ""
"``.../device/3bb9/...``: the device ID is ``3bb9`` - this is retrieved "
"from the ``id`` attribute from the device"
msgstr ""

#: ../../source/using-api-interface.rst:261
msgid ""
"``.../history?lastN=3&attr=temperature``: the requested attribute is "
"temperature and it should get the last 3 values. More operators are "
"available in `history APIs`_."
msgstr ""

#: ../../source/using-api-interface.rst:265
msgid "The request should result in the following message:"
msgstr ""

#: ../../source/using-api-interface.rst:291
msgid "This message contains all previously sent values."
msgstr ""

